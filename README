------------------------------------------------------------------------------
/**
 * Name: Lawrence Wolf-Sonkin, Sidney Jackson, Eddie Heredia
 * Blackboard Login:  lwolfso1, sjacks85, eheredi1 
 * Course: Data Structures 600.226.02
 * Assignment: Project 4 (Images as Graphs)
 * Due Date: Friday - April 29, 2016
 */
------------------------------------------------------------------------------
README:
------------------------------------------------------------------------------

TESTING DISCLAIMER:

Dear whom ever this may concern, 

We would like to convey to you the major issues our program is having to
hopefully make grading easier and make the functionality of our code 
(along with some of it's flaws) apparent (cause it DOES mostly work...
we swear!)

Anyway, our program seems to work perfectly for small images (around 400 x 240
pixels). The program is able to properly segment images for the small black
and white test image, the flag image (our own test images), tiny image 
(our test image), and pixel (another test image of our creation). These should
at least demonstrate that for small images our program is capabe of segmenting
images into expected parsed images and printing the correct number of segments/
edges. Further, the time it takes to run is definitely reasonable running 
in about 5 to 6 seconds.

The issue with our program becomes apparent when we try using larger test 
images. For whatever reason, larger images "break" the segmenter. Instead
of parsing images into the expected large pieces of color we'd like to 
have as output, it not only segments the images into hundreds (at times 
thousands) of segments, but prints the whole image multiple times (yeah,
we're not sure why... and we've been debugging for DAYS).

Finally, if you would like to take a closer look at what's going on at 
runtime (while the images are being segmented and output) we have a 
commented out print function in main that may offer some insight
(for example: segment size, the current output number, etc.)

All in all, it mostly works... (ehem- please give us a good grade!)

Yours truly,
	Desperate Data Structures students who would be forever greatful
	for any and all mercy you choose to impart on in the grading of our 
	P4 project.

------------------------------------------------------------------------------

PART A: 

Last Modified 4/17/2016
Part A.3 -> WGraph (Adjacency List):
In implementing the data structure expected to store for each vertex a list of neighboring 
vertices adjacency/edge using incidence lists instead of an adjacency matrix (graph), we 
opted to use an arraylist of hashmaps guaranteeing constant time look up. To be "space 
cautious", we also wanted to ensure that hashmaps were given only to array slots we knew were
in use, where everything not in use is simply null. And, to generally summarize the data 
structure, the hashmap key is the vertex neighbor of the current array index (the referred to
vertex), and the value is the weight of the edge leading to that particular neighbor.

Last Modified 4/20/2016
Part A.JUNIT -> WGraphTest.java JUnit Test:
(The following HAS NOT YET HAPPENED)
We modified the given JUnit test so that it could work with
generics and tested the new implementation for unweighted graph by 
changing the type of graph instantiated. Further, the modified JUNIT test
tests the incidentEdges method (to compute a minimum spanning tree/forest), 
and the kruskals minimum spanning tree method for Part B.  

------------------------------------------------------------------------------

PART B:
Last Modified 4/26/2016
Part B.1 -> WEdge.java (Kruskals Method):
Worked on Kruskal's Method.

Last Modified 4/26/2016
Part B.2 -> PQHeap.java:
Implemented interface methods.

------------------------------------------------------------------------------

PART C: 4/26/2016
Part C.1-2
Created Pixel, MakeGraph (with Start Up Code), PixelDistance, and Distance
Implemented ImagetoGraph Method, however Segmenter is still left hanging.

------------------------------------------------------------------------------

SUMMARY:
	Had to rely on our confidence in modular testing alot. Because alot of
	functions depended on each other, it was hard to test our methods. We
	just had to be confident that each method worked well given tests we
	understood.  

	Part C took FOREVER! After we implemented all of the functions that we
	believed we needed to implement and after getting all of our source
	code to compile, the deugging began. That proved to be the most 
	frustrating part of the project, BUT! It works sooo! Woo, hoo!

	Disclaimer: Though it works, it still does take about a minute to process 
	reasonable images...

------------------------------------------------------------------------------

COMPLICATIONS:
	
	We ran into the issue of composing primitive arrays out of generics.
	For whatever reason, java doesn't like making generic arrays (???) which is
	a bit odd considering that it's the most basic data strcture in java. 
	Anyway, after "surfing piazza" we discovered that we should just switch to
	Array lists because they're more flexible and makes java happy.

	PQHeap took a bit of time due to a couple sneaky comparison errors, but
	was resolved quickly once realized.

	Took a bit of time to figure out how to implement Kruskal's Algorithm.

	It was difficult not being able to test everything continuously. A lot
	of the program was implemented in parts, meaning that it was difficult
	to see how each piece of the program worked with other dependent pieces
	of the program until we were working on a function that was implemented
	later. Kruskals depended on PQHeap, making it difficult to test Kruskals
	Method since we worked on these simultaneously. In turn, it was difficult
	to test the imagetoGraph Method because the method (Kruskals) which
	offered us visual feedback was not yet implemented. There wasn't really
	much we could do about this other than being especially careful making 
	sure our functions worked as expected given simply self made tests that
	we had "answers" to.

	Once Part A through C were completed and all of the source files needed
	to run the program we began testing on the blackandwhite image.
	After working out a couple of exceptions and bugs, we were able to run
	the program. Unfortunately, after the program took longer than 5 minutes
	to run, we realized we either had a majot time complexity issue, or some
	other broken bit of code that could literally be anything. We suspected
	that it was the segmented that was giving us problems because our program
	was producing hundreds of completely unparsed/non-segmented images.
	In other words, our program spit back the same image we gave it...several
	times. So! We decided to debug using a smaller image (10 x 12) which proved
	to also be too large, so we began testing on an even smaller image (2 x 4)
	to see if we could at least get results we understood and work from there.

	After making a ton of toString methods, print statements, and running GDB
	(shout out to eclipse), we started working out the (many) bugs that were
	in our program. It took a few hours, but in the end we seemed to get it 
	to work!

------------------------------------------------------------------------------

"ACTIVITY LOG":

Date: 4/17/2016
PART A:
WGraph.java (Lawrence/Eddie) -> Modified Graph Implementation to use lists instead
	of matrices,
GVertex.java (Sidney/Lawrence) -> Modified Vertex.java to handle generics 
	for  GVertex.java.  
WEdge.java (Sidney/Eddie) -> Modified Edge.java to include weight/ implement 
		comparable for WEdge.java 

Date: 4/20/2016
PART A:
WGraphP4 (Eddie/Lawrence) -> Completed WGraph Methods
WEdge.java (Lawrence/Eddie/Sidney) -> Worked on modifying Edge.java function for WEdge.java
PART B:
WEdge.java (Eddie/Sidney) -> Implemented Kruskals Method
PQHeap.java (Lawrence) -> Implemented Priority Queue Heap

Date: 4/22 & 24/2016
Part B:
PQHeap.java (Lawrence) -> Continued Debugging  Priority Queue Heap
WEdge.java (Eddie) -> Continued Debugging Kruskals Method
Part C:
Pixel.java/ Distance.java (Sidney) -> Made Simple Classes needed for part C

Date: 4/26/2016
Part B:
PQHeap.java (Lawrence) -> Copmleted Priority Queue Heap (Whoop!)
WEdge.java (Eddie) -> Continued Debugging Kruskals Method
Checkstyled (Lawrence/Sidney) -> Checkstyled majority of files.
Part C:
MakeGraph.java/ PixelDistance.java (Sidney) -> Added Part C classes and 
implemented imagetoGraph (Not yet tested at this point)

Date: 4/27/2016
Part C:
Created UnionConditionCalcs Class and a couple of git other helper subclasses
to handle the modified Kruskals function (Lawrence, Eddie, Sidney)
-> Got Modified Kruskals to Work.
-> Completed Part C (Began/Completed debugging/testing)

Date: 4/29/2016
STILLLLL DEBUGGING!!!!!!!!
------------------------------------------------------------------------------